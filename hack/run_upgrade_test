#! /bin/bash

set -e

DEBUG=false

info  () { echo >&2 " * $*" ; }
debug () { ! ${DEBUG} || echo >&2 " ~ $*" ; }
error () { echo >&2 "ERROR: $*" ; false ; }

ADMIN_PASSWORD=redhat

STEPS=( "$@" )
: ${OS=centos7}

get_image_id ()
{
    local old_IFS=$IFS
    local result
    IFS=:
    set -- $1
    case $2 in
        local)
            echo "$(cat "$1"/.image-id)"
            ;;
        remote)
            local version=${1//\./}
            case $OS in
            rhel7)
                ns=rhscl
                if test "$version" -le 92; then
                    ns=openshift3
                fi
                image=registry.access.redhat.com/$ns/postgresql-${version}-rhel7
                ;;
            centos7)
                ns=centos
                if test "$version" -le 92; then
                    ns=openshift
                fi
                local image=docker.io/$ns/postgresql-${1//\./}-centos7
                ;;
            esac
            docker pull "$image" >/dev/null
            echo "$image"
            ;;
    esac
    IFS=$old_IFS
}

quote_args ()
{
    quote_args_result=
    local space=
    for arg; do
        quote_args_result+="$space$(printf "%q" "$arg")"
        space=' '
    done
}

quote_args_print ()
{
    quote_args "$@"
    echo "$quote_args_result"
}

# background_container IMAGE DOCKER_ARGS CMD
background_container ()
{
    CID=$(eval "docker run -d $2 $1 $3")
    test -n "$CID"
}

# run_server DATADIR IMAGE_ID DOCKER_ARGS
run_server ()
{
    local datadir=$1
    local image_id=$2
    local docker_args=$(quote_args_print -e POSTGRESQL_ADMIN_PASSWORD="$ADMIN_PASSWORD")
    docker_args+=' '$(quote_args_print -v "$datadir:/var/lib/pgsql/data:Z")
    docker_args+=" $3"
    background_container "$image_id" "$docker_args"
}

# wait_for_postgres CID
wait_for_postgres ()
{
    local cid=$1
    local counter=0

    debug "Waiting for PG server to come up in $cid container"
    while test $counter -lt 30
    do
        # the "-h localhost" is crucial here as the container runs postgresql
        # server twice and we don't want to connect to the first process (see
        # run-postgresql script)
        output=$(docker exec -i "$cid" bash -c \
            "psql -h localhost -tA -c 'select 1;' 2>/dev/null || :")
        case $output in
        1*) return ;;
        "") ;;
        *) echo "$output" ; false ;;
        esac
        sleep 1
        counter=$(( counter + 1 ))
    done
}


data_empty_create ()
{
    docker exec -i "$CID" container-entrypoint psql &>/dev/null <<EOF
create table blah (id int);
insert into blah values (1), (2), (3);
EOF
}

data_empty_check ()
{
    debug "doing empty check"
    local exp_output='1
2
3'
    local output=$(docker exec -i "$CID" container-entrypoint psql -tA <<EOF
select * from blah order by id;
EOF
)
    test "$exp_output" = "$output" || error "Unexpected output '$output'"
}

data_pagila_create ()
{
    debug "initializing pagila database"
    CID="$CID" ./hack/pagila.sh
}

data_pagila_check ()
{
    debug "doing pagila check"
    local exp_output='28
16
2'
    local output=$(docker exec -i "$CID" container-entrypoint psql -tA <<EOF
select count(*) from information_schema.tables where table_schema = 'public';
select count(*) from information_schema.triggers;
select count(*) from staff;
EOF
)
    test "$exp_output" = "$output" \
        || error "Unexpected output: '$output', expected: '$exp_output'"
}


# init_datadir IMAGE_ID dataspec
# ------------------------------
init_datadir ()
{
    local image_id=$1
    DATADIR=$(mktemp -d)
    setfacl -m u:26:rwx "$DATADIR"
    run_server "$DATADIR" "$image_id"
    wait_for_postgres "$CID"

    eval "data_$2_create"
    eval "data_$2_check"

    docker stop "$CID" >/dev/null
    docker rm -f "$CID" >/dev/null
}


# check_upgrade_path {hardlink|copy} dataspec
assert_upgrade_succeeds ()
{
    info "Initializing datadir with $VERSION_FROM PostgreSQL"
    local INIT_IMAGE=$(get_image_id "$VERSION_FROM")
    local dataspec=$2
    init_datadir "$INIT_IMAGE" "$dataspec"

    info "Running upgrade '$1/$dataspec'"

    for upgrade_to in "${UPGRADE_PATH[@]}"; do
        info "Upgrading to $upgrade_to"
        UPGRADE_IMAGE=$(get_image_id "$upgrade_to")
        run_server "$DATADIR" "$UPGRADE_IMAGE" "-e POSTGRESQL_UPGRADE=$1"
        wait_for_postgres "$CID"
        eval "data_${dataspec}_check"
        debug "the upgrading container of version '$upgrade_to' responded"
        docker stop "$CID" >/dev/null
        docker rm -f "$CID" >/dev/null

        run_server "$DATADIR" "$UPGRADE_IMAGE"
        wait_for_postgres "$CID"
        eval "data_${dataspec}_check"
        debug "restarted server of version '$upgrade_to' responded"
        docker stop "$CID" >/dev/null
        docker rm -f "$CID" >/dev/null
    done
}

VERSION_FROM=$1 ; shift
UPGRADE_PATH=( "$@" )
for data in empty pagila; do
    assert_upgrade_succeeds hardlink "$data"
    assert_upgrade_succeeds copy "$data"
done
