#!/bin/bash
#
# Test the PostgreSQL image.
#
# IMAGE_NAME specifies the name of the candidate image used for testing.
# The image has to be available before this script is executed.
#

set -exo nounset
shopt -s nullglob

IMAGE_NAME=${IMAGE_NAME-openshift/postgresql-92-centos7-candidate}
CIDFILE_DIR=$(mktemp --suffix=postgresql_test_cidfiles -d)

function cleanup() {
	for cidfile in $CIDFILE_DIR/* ; do
		CONTAINER=$(cat $cidfile)

		echo "Stopping and removing container $CONTAINER..."
		docker stop $CONTAINER
		exit_status=$(docker inspect -f '{{.State.ExitCode}}' $CONTAINER)
		if [ "$exit_status" != "0" ]; then
			echo "Dumping logs for $CONTAINER"
			docker logs $CONTAINER
		fi
		docker rm $CONTAINER
		rm $cidfile
		echo "Done."
	done
	rmdir $CIDFILE_DIR
}
trap cleanup EXIT

function get_cid() {
	local id="$1" ; shift || return 1
	echo $(cat "$CIDFILE_DIR/$id")
}

function get_container_ip() {
	local id="$1" ; shift
	docker inspect --format='{{.NetworkSettings.IPAddress}}' $(get_cid "$id")
}

function postgresql_cmd() {
	docker run --rm -e PGPASSWORD="${PASS}" $IMAGE_NAME psql postgresql://$USER@$CONTAINER_IP:5432/db "$@"
}

function test_connection() {
	local name=$1 ; shift
	ip=$(get_container_ip $name)
	echo "  Testing PostgreSQL connection to $ip..."
	local max_attempts=20
	local sleep_time=2
	for i in $(seq $max_attempts); do
		echo "    Trying to connect..."
		set +e
		postgresql_cmd <<< "SELECT 1;"
		status=$?
		set -e
		if [ $status -eq 0 ]; then
			echo "  Success!"
			return 0
		fi
		sleep $sleep_time
	done
	return 1
}

function test_postgresql() {
	echo "  Testing PostgreSQL"
	postgresql_cmd <<< "CREATE TABLE tbl (col1 VARCHAR(20), col2 VARCHAR(20));"
	postgresql_cmd <<< "INSERT INTO tbl VALUES ('foo1', 'bar1');"
	postgresql_cmd <<< "INSERT INTO tbl VALUES ('foo2', 'bar2');"
	postgresql_cmd <<< "INSERT INTO tbl VALUES ('foo3', 'bar3');"
	postgresql_cmd <<< "SELECT * FROM tbl;"
	postgresql_cmd <<< "DROP TABLE tbl;"
	echo "  Success!"
}

function create_container() {
	local name=$1 ; shift
	local cargs=${CONTAINER_ARGS:-}
	cidfile="$CIDFILE_DIR/$name"
	# create container with a cidfile in a directory for cleanup
	docker run $cargs --cidfile $cidfile -d "$@" $IMAGE_NAME
	echo "Created container $(cat $cidfile)"
}

function assert_login_access() {
	local USER=$1 ; shift
	local PASS=$1 ; shift
	local success=$1 ; shift

	if $success; then
		postgresql_cmd <<< "SELECT 1;" &&
			echo "    $USER($PASS) access granted as expected"
	else
		postgresql_cmd <<< "SELECT 1;" ||
			echo "    $USER($PASS) access denied as expected"
	fi
}

# Make sure the invocation of docker run fails.
function assert_container_creation_fails() {

	# Time the docker run command. It should fail. If it doesn't fail,
	# postgresql will keep running so we kill it with SIGKILL to make sure
	# timeout returns a non-zero value.
	set +e
	timeout -s 9 --preserve-status 60s docker run --rm "$@" $IMAGE_NAME
	ret=$?
	set -e

	# Timeout will exit with a high number.
	if [ $ret -gt 30 ]; then
		return 1
	fi
}

function try_image_invalid_combinations() {
	assert_container_creation_fails "$@"
	assert_container_creation_fails -e POSTGRESQL_USER=user -e POSTGRESQL_PASSWORD=pass "$@"
	assert_container_creation_fails -e POSTGRESQL_USER=user -e POSTGRESQL_DATABASE=db "$@"
	assert_container_creation_fails -e POSTGRESQL_PASSWORD=pass -e POSTGRESQL_DATABASE=db "$@"
}

function run_container_creation_tests() {
	echo "  Testing image entrypoint usage"
	try_image_invalid_combinations
	try_image_invalid_combinations  -e POSTGRESQL_ADMIN_PASSWORD=admin_pass

	VERY_LONG_IDENTIFIER="very_long_identifier_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
	assert_container_creation_fails -e POSTGRESQL_USER=0invalid -e POSTGRESQL_PASSWORD=pass -e POSTGRESQL_DATABASE=db -e POSTGRESQL_ADMIN_PASSWORD=admin_pass
	assert_container_creation_fails -e POSTGRESQL_USER=$VERY_LONG_IDENTIFIER -e POSTGRESQL_PASSWORD=pass -e POSTGRESQL_DATABASE=db -e POSTGRESQL_ADMIN_PASSWORD=admin_pass
	assert_container_creation_fails -e POSTGRESQL_USER=user -e POSTGRESQL_PASSWORD="\"" -e POSTGRESQL_DATABASE=db -e POSTGRESQL_ADMIN_PASSWORD=admin_pass
	assert_container_creation_fails -e POSTGRESQL_USER=user -e POSTGRESQL_PASSWORD=pass -e POSTGRESQL_DATABASE=9invalid -e POSTGRESQL_ADMIN_PASSWORD=admin_pass
	assert_container_creation_fails -e POSTGRESQL_USER=user -e POSTGRESQL_PASSWORD=pass -e POSTGRESQL_DATABASE=$VERY_LONG_IDENTIFIER -e POSTGRESQL_ADMIN_PASSWORD=admin_pass
	assert_container_creation_fails -e POSTGRESQL_USER=user -e POSTGRESQL_PASSWORD=pass -e POSTGRESQL_DATABASE=db -e POSTGRESQL_ADMIN_PASSWORD="\""
	echo "  Success!"
}

function test_config_option() {
	local env_var=$1 ; shift
	local setting=$1 ; shift
	local value=$1 ; shift

	# If $value is a string, it needs to be in simple quotes ''.
	# If nothing is found, grep returns 1 and test fails.
	docker run --rm -e $env_var=${value//\'/} $IMAGE_NAME cat /var/lib/pgsql/openshift-custom-postgresql.conf | grep -q "$setting = $value"
}

function run_configuration_tests() {
	echo "  Testing image configuration settings"
	test_config_option POSTGRESQL_MAX_CONNECTIONS max_connections 42
	test_config_option POSTGRESQL_SHARED_BUFFERS shared_buffers 64MB
	test_config_option POSTGRESQL_MAX_PREPARED_TXS max_prepared_transactions 10
	echo "  Success!"
}

function run_tests() {
	local name=$1 ; shift
	envs="-e POSTGRESQL_USER=$USER -e POSTGRESQL_PASSWORD=$PASS -e POSTGRESQL_DATABASE=db"
	if [ -v ADMIN_PASS ]; then
		envs="$envs -e POSTGRESQL_ADMIN_PASSWORD=$ADMIN_PASS"
	fi
	create_container $name $envs
	CONTAINER_IP=$(get_container_ip $name)
	test_connection $name
	echo "  Testing login accesses"
	assert_login_access $USER $PASS true
	assert_login_access $USER "${PASS}_foo" false
	if [ -v ADMIN_PASS ]; then
		assert_login_access postgres $ADMIN_PASS true
		assert_login_access postgres "${ADMIN_PASS}_foo" false
	else
		assert_login_access postgres "foo" false
		assert_login_access postgres "" false
	fi
	echo "  Success!"
	test_postgresql $name
}

# Tests.

run_container_creation_tests
run_configuration_tests
USER=user PASS=pass run_tests no_admin
USER=user1 PASS=pass1 ADMIN_PASS=r00t run_tests admin
# Test with arbitrary uid for the container
CONTAINER_ARGS="-u 12345" USER=user2 PASS=pass run_tests no_admin_altuid
CONTAINER_ARGS="-u 12345" USER=user3 PASS=pass1 ADMIN_PASS=r00t run_tests admin_altuid
